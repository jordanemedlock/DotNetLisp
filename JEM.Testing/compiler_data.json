{
    "DottedName": {
        "A.B.C": "A.B.C",
        "A": "A",
        "something": "something"
    },
    "HashAlg": {
        "(.hash algorithm 1)": ".hash algorithm 1",
        "(.hash algorithm -123)": ".hash algorithm -123"
    },
    "Version": {
        "(.ver 1 0 0 0)": ".ver 1 : 0 : 0 : 0"
    },
    "Culture": {
        "(.culture \"en-us\")": ".culture \"en-us\""
    },
    "AsmDecl": {
        "(.hash algorithm 1)": ".hash algorithm 1",
        "(.hash algorithm -123)": ".hash algorithm -123",
        "(.ver 1 0 0 0)": ".ver 1 : 0 : 0 : 0",
        "(.culture \"en-us\")": ".culture \"en-us\""
    },
    "ExternAssembly": {
        "(.assembly extern A.B.C ((.culture \"en-us\")))": ".assembly extern A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly extern A ((.ver 1 0 0 0)))": ".assembly extern A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly extern F ((.hash algorithm 1)))": ".assembly extern F {\n\t.hash algorithm 1\n}",
        "(.assembly extern anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly extern anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}"
    },
    "NonExternAssembly": {
        "(.assembly A.B.C ((.culture \"en-us\")))": ".assembly A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly A ((.ver 1 0 0 0)))": ".assembly A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly F ((.hash algorithm 1)))": ".assembly F {\n\t.hash algorithm 1\n}",
        "(.assembly anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}"
    },
    "Assembly": {
        "(.assembly extern A.B.C ((.culture \"en-us\")))": ".assembly extern A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly extern A ((.ver 1 0 0 0)))": ".assembly extern A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly extern F ((.hash algorithm 1)))": ".assembly extern F {\n\t.hash algorithm 1\n}",
        "(.assembly extern anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly extern anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}",
        "(.assembly A.B.C ((.culture \"en-us\")))": ".assembly A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly A ((.ver 1 0 0 0)))": ".assembly A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly F ((.hash algorithm 1)))": ".assembly F {\n\t.hash algorithm 1\n}",
        "(.assembly anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}"
    },
    "Decl": {
        "(.assembly extern A.B.C ((.culture \"en-us\")))": ".assembly extern A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly extern A ((.ver 1 0 0 0)))": ".assembly extern A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly extern F ((.hash algorithm 1)))": ".assembly extern F {\n\t.hash algorithm 1\n}",
        "(.assembly extern anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly extern anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}",
        "(.assembly A.B.C ((.culture \"en-us\")))": ".assembly A.B.C {\n\t.culture \"en-us\"\n}",
        "(.assembly A ((.ver 1 0 0 0)))": ".assembly A {\n\t.ver 1 : 0 : 0 : 0\n}",
        "(.assembly F ((.hash algorithm 1)))": ".assembly F {\n\t.hash algorithm 1\n}",
        "(.assembly anything ((.hash algorithm 1) (.ver 1 0 0 0) (.culture \"en-us\")))": ".assembly anything {\n\t.hash algorithm 1\n.ver 1 : 0 : 0 : 0\n.culture \"en-us\"\n}",
        "(.corflags 123)": ".corflags 123",
        "(.file nometadata \"some_filename.txt\" .hash (1 2 3 4) .entrypoint)": ".file nometadata \"some_filename.txt\" .hash = (1 2 3 4) .entrypoint",
        "(.file \"some_filename.txt\" .hash (1 2 3 4) .entrypoint)": ".file  \"some_filename.txt\" .hash = (1 2 3 4) .entrypoint",
        "(.file \"some_filename.txt\" .hash (1 2 3 4))": ".file  \"some_filename.txt\" .hash = (1 2 3 4) ",
        "(.field private int32 xOrigin)": ".field  private int32 xOrigin ",
        "(.field private int32 xOrigin = bool true)": ".field  private int32 xOrigin = bool (true)",
        "(.field private int32 xOrigin = unsigned int64 123)": ".field  private int32 xOrigin = unsigned int64 (123)",
        "(.field private int32 xOrigin at Something)": ".field  private int32 xOrigin at Something"
    },
    "Corflags": {
        "(.corflags 123)": ".corflags 123"
    },
    "FileDirective": {
        "(.file nometadata \"some_filename.txt\" .hash (1 2 3 4) .entrypoint)": ".file nometadata \"some_filename.txt\" .hash = (1 2 3 4) .entrypoint",
        "(.file \"some_filename.txt\" .hash (1 2 3 4) .entrypoint)": ".file  \"some_filename.txt\" .hash = (1 2 3 4) .entrypoint",
        "(.file \"some_filename.txt\" .hash (1 2 3 4))": ".file  \"some_filename.txt\" .hash = (1 2 3 4) "
    },
    "Filename": {
        "\"some filename\"": "\"some filename\""
    },
    "Field": {
        "(.field private int32 xOrigin)": ".field  private int32 xOrigin ",
        "(.field private int32 xOrigin = bool true)": ".field  private int32 xOrigin = bool (true)",
        "(.field private int32 xOrigin = unsigned int64 123)": ".field  private int32 xOrigin = unsigned int64 (123)",
        "(.field private int32 xOrigin at Something)": ".field  private int32 xOrigin at Something"
    },
    "FieldInit": {
        "(bool true)": "bool (true)",
        "(bytearray (1 2 3 4 5))": "bytearray (1 2 3 4 5)",
        "(char 128)": "char (128)",
        "(float32 1.3)": "float32 (1.3)",
        "(float32 123)": "float32 (123)",
        "(float64 1.3)": "float64 (1.3)",
        "(float64 123)": "float64 (123)",
        "(unsigned int8 127)": "unsigned int8 (127)",
        "(int16 123)": " int16 (123)",
        "(unsigned int32 123)": "unsigned int32 (123)",
        "(int64 123)": " int64 (123)",
        "\"Some String\"": "\"Some String\"",
        "nullref": "nullref"

    },
    "FieldInitOrDataLabel": {
        "(= bool true)": "= bool (true)",
        "(= (bool true))": "= bool (true)",
        "(at Something)":  "at Something"
    },
    "FieldDecl": {
        "(private int32 xOrigin)": " private int32 xOrigin "
    },
    "Type": {
        "(! 10)": "!10",
        "(!! 10)":  "!!10",
        "bool": "bool",
        "float32": "float32",
        "object": "object",
        "string": "string",
        "void": "void",
        "int": "int",
        "int32": "int32",
        "(class (Something))": "class  Something",
        "(valuetype (Something))": "valuetype  Something",
        "(method (default) int ((int x) (float32 something) (string str)))": "method   default int * ( int  x,  float32  something,  string  str)"

    },
    "ValueType": {
        "(valuetype (Something))": "valuetype  Something",
        "(valuetype ((.module \"something.txt\") Something))": "valuetype [.module \"something.txt\"] Something"

    },
    "ClassRef": {
        "(class (Something))": "class  Something"
    },
    "Bound": {
        "...": "..."
    },
    "TypeModifier": {
        "(int [ ... ])": "int[...]",
        "(bool pinned)": "bool pinned",
        "(int modopt (Something))": "int modopt ( Something)",
        "(int < int float32 >)": "int<int, float32>",
        "(int &)": "int &",
        "(int *)": "int *"

    },
    "PinnedType": {
        "(int pinned)": "int pinned",
        "(float32 pinned)": "float32 pinned"
    },
    "ModType": {
        "(int modopt (Something))": "int modopt ( Something)",
        "(int modreq (SomethingElse))": "int modreq ( SomethingElse)"
    },
    "ArrayType": {
        "(int [ ... ... ])": "int[..., ...]",
        "(float32 [ ])": "float32[]"
    },
    "GenericType": {
        "(int < float32 >)": "int<float32>",
        "(int < int32 float64 >)":  "int<int32, float64>"
    },
    "GenArgs": {
        "(int)": "int",
        "(int object)": "int, object",
        "(int object float32)": "int, object, float32"
    },
    "CallConv": {
        "(instance explicit default)": "instance explicit default",
        "(instance default)": "instance  default",
        "(default)": "  default",
        "((unmanaged fastcall))": "  unmanaged fastcall",
        "(instance (unmanaged fastcall))": "instance  unmanaged fastcall"
    },
    "CallKind": {
        "default": "default",
        "vararg": "vararg",
        "(unmanaged cdecl)": "unmanaged cdecl",
        "(unmanaged fastcall)": "unmanaged fastcall"
    },
    "Parameters": {
        "((int x) (float32 something) (string str))": " int  x,  float32  something,  string  str"
    },
    "Param": {
        "(int something)": " int  something",
        "(in int something)": "[in] int  something",
        "(opt int (marshal int32) something)": "[opt] int marshal (int32) something",
        "(int (marshal int32) something)": " int marshal (int32) something"
    },
    "ParamAttr": {
        "in": "[in]",
        "out": "[out]",
        "opt": "[opt]"
    },
    "TypeReference": {
        "((.module \"something.txt\") Something)": "[.module \"something.txt\"] Something",
        "((A.B.C) Something SomethingElse)": "[A.B.C] Something/SomethingElse",
        "(Something SomethingElse)": " Something/SomethingElse"
    },
    "ResolutionScope": {
        "(.module \"something.txt\")": "[.module \"something.txt\"]",
        "(A.B.C)": "[A.B.C]"
    },
    "FieldAttr": {
        "assembly": "assembly",
        "(marshal int32)": "marshal (int32)",
        "private": "private",
        "static": "static"
    },
    "Marshal": {
        "(marshal [])": "marshal ([])",
        "(marshal int32)": "marshal (int32)",
        "(marshal bool)": "marshal (bool)",
        "(marshal method)": "marshal (method)"
    },
    "NativeType": {
        "[]": "[]",
        "bool": "bool",
        "float32": "float32",
        "lpstr": "lpstr",
        "method": "method",
        "int32": "int32"
    },
    "NativeTypeArray": {
        "(int [])": "int[]",
        "(int [ 10 ])": "int[10]"
    },
    "IntType": {
        "int": "int",
        "int32": "int32",
        "int64": "int64",
        "(unsigned int)": "unsigned int",
        "(unsigned int64)": "unsigned int64"
    },
    "SimpleIntType": {
        "int": "int",
        "int8": "int8",
        "int16": "int16",
        "int32": "int32",
        "int64": "int64"
    },
    "ClassDecl": {
        "(.class public SomeName ())": ".class public SomeName   {\n\n}",
        "(.class (nested public) SomeName (T U) ())": ".class nested public SomeName<T, U>   {\n\n}",
        "(.class public SomeName (T U) (extends SomeOtherClass) ())": ".class public SomeName<T, U> extends SomeOtherClass  {\n\n}",
        "(.class public SomeName (T U) (implements SomeOtherClass) ())": ".class public SomeName<T, U>  implements SomeOtherClass {\n\n}",
        "(.class public SomeName (T U) (implements SomeOtherClass AnotherInterface) ())": ".class public SomeName<T, U>  implements SomeOtherClass, AnotherInterface {\n\n}",
        "(.class public SomeName (T U) (extends SomeOtherClass) (implements SomeOtherClass) ())": ".class public SomeName<T, U> extends SomeOtherClass implements SomeOtherClass {\n\n}"

    },
    "ClassHeader": {
        "(public SomeName)": "public SomeName  ",
        "((nested public) SomeName (T U))": "nested public SomeName<T, U>  ",
        "(public SomeName (T U) (extends SomeOtherClass))": "public SomeName<T, U> extends SomeOtherClass ",
        "(public SomeName (T U) (implements SomeOtherClass))": "public SomeName<T, U>  implements SomeOtherClass",
        "(public SomeName (T U) (implements SomeOtherClass AnotherInterface))": "public SomeName<T, U>  implements SomeOtherClass, AnotherInterface",
        "(public SomeName (T U) (extends SomeOtherClass) (implements SomeOtherClass))": "public SomeName<T, U> extends SomeOtherClass implements SomeOtherClass"
    },
    "TypeSpec": {
        "((.module \"something.txt\") Something)": "[.module \"something.txt\"] Something",
        "(class (Something))": "class  Something",
        "([ .module Something ])": "[.module Something]",
        "([ Something ])":  "[ Something]"
    },
    "GenPars": {

        "((+ - class .ctor (int32) Something) (Something) ((int32 float32) Something))": "<+ - class .ctor (int32) Something,   Something,  (int32, float32) Something>",
        "()": false,
        "((Something))": "<  Something>",
        "(Something)": "<Something>",
        "(T U)": "<T, U>"
    },
    "GenPar": {
        "(+ - class .ctor (int32) Something)": "+ - class .ctor (int32) Something",
        "(Something)": "  Something",
        "Something": "Something",
        "((int32 float32) Something)":  " (int32, float32) Something"
    },
    "GenParAttribs": {
        "+": "+",
        "-": "-",
        "class": true,
        "valuetype": true,
        ".ctor": true,
        "somethingelse": false
    },
    "GenConstraints": {
        "(int32 float32)": "(int32, float32)",
        "()": false,
        "(int32 bool object)": "(int32, bool, object)"
    },
    "ClassAttr": {
        "public": true,
        "abstract": true,
        "ansi": true,
        "autochar": true,
        "beforefieldinit": true,
        "explicit": true,
        "interface": true,
        "(nested assembly)": "nested assembly",
        "(nested famandassem)": "nested famandassem",
        "(nested family)": "nested family",
        "(nested famorassem)": "nested famorassem",
        "(nested private)": "nested private",
        "(nested public)": "nested public",
        "private": true,
        "rtspecialname": true,
        "sealed": true,
        "sequential": true,
        "serializable": true,
        "specialname": true,
        "unicode": true
    },
    "ClassMember": {
        "(.field private int32 xOrigin)": ".field  private int32 xOrigin ",
        "(.field private int32 xOrigin = bool true)": ".field  private int32 xOrigin = bool (true)",
        "(.field private int32 xOrigin = unsigned int64 123)": ".field  private int32 xOrigin = unsigned int64 (123)",
        "(.field private int32 xOrigin at Something)": ".field  private int32 xOrigin at Something",
        "(.data Something (int64 0))":  ".data Something = int64 (0) ",
        "(.custom abstract bool .ctor () = (1 2 3 4))": ".custom abstract  bool  .ctor()  = (1 2 3 4)",
        "(.event Something ((.fire (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))))": ".event Something {\n.fire instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)\n}"

    },
    "EventDecl": {
        "(Something ((.fire (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))))": "Something {\n.fire instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)\n}"
    },
    "EventHeader": {
        "(specialname rtspecialname (class (Something)) SomethingElse)": "specialname rtspecialname class  Something SomethingElse",
        "(rtspecialname (class (Something)) SomethingElse)": " rtspecialname class  Something SomethingElse",
        "(specialname (class (Something)) SomethingElse)": "specialname  class  Something SomethingElse",
        "((class (Something)) SomethingElse)": "  class  Something SomethingElse",
        "(SomethingElse)": "   SomethingElse"
    },
    "EventMember": {
        "(.addon (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))": ".addon instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)",
        "(.custom abstract bool .ctor () = (1 2 3 4))": ".custom abstract  bool  .ctor()  = (1 2 3 4)",
        "(.fire (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))": ".fire instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)",
        "(.other (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))": ".other instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)",
        "(.removeon (instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))": ".removeon instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)",
        "(.line 1)": ".line 1 ",
        "(.line 1 10)": ".line 1:10 "
    },
    "FireDecl": {
        "((instance explicit default) int (class (Something)) SomethingElse ((int v1) (int v2)))": "instance explicit default int class  Something :: SomethingElse( int  v1,  int  v2)"
    },
    "ExternSourceDecl": {
        "(.line 1 10 'Something')": ".line 1:10 'Something'",
        "(.line 1 'Something')": ".line 1 'Something'",
        "(.line 1)": ".line 1 ",
        "(.line 1 10)": ".line 1:10 "
    },
    "CustomDecl": {
        "(abstract bool .ctor () = (1 2 3 4))": "abstract  bool  .ctor()  = (1 2 3 4)"
    },
    "MethodDecl": {
        "(abstract bool SomeMethod () cil ())": "abstract  bool  SomeMethod() cil {\n\n}",
        "(abstract bool SomeMethod () cil ((.entrypoint)))": "abstract  bool  SomeMethod() cil {\n.entrypoint\n}",
        "(abstract bool SomeMethod () cil ((.locals (int (float32 x)))))": "abstract  bool  SomeMethod() cil {\n.locals  (int, float32 x)\n}",
        "(abstract bool SomeMethod () cil ((.entrypoint) (.custom abstract bool .ctor () = (1 2 3 4))))": "abstract  bool  SomeMethod() cil {\n.entrypoint\n.custom abstract  bool  .ctor()  = (1 2 3 4)\n}"
    },
    "MethodBodyItem": {
        "(.custom abstract bool .ctor () = (1 2 3 4))": ".custom abstract  bool  .ctor()  = (1 2 3 4)",
        "(.data Something (int64 0))":  ".data Something = int64 (0) ",
        "(.emitbyte 10)": ".emitbyte 10",
        "(.entrypoint)": ".entrypoint",
        "(.locals init (int))": ".locals init (int)",
        "(.locals (int (float32 x)))": ".locals  (int, float32 x)"
    },
    "LocalsDecl": {
        "(init (int))": "init (int)",
        "((int (float32 x)))": " (int, float32 x)"
    },
    "LocalsSignature": {
        "((int x))": "int x", 
        "((int x) (float32 y))": "int x, float32 y",
        "(int (float32 x))": "int, float32 x"
    },
    "Local": {
        "int": true,
        "(int x)": "int x"
    },
    "Ctor":{
        "(abstract (instance default) bool (marshal int32) .ctor<T U> ((int v1) (float32 v2)) cil)": 
        "abstract instance  default bool marshal (int32) .ctor<T, U>( int  v1,  float32  v2) cil"

    },
    "MethodHeader": {
        "(abstract (instance default) bool (marshal int32) SomeMethod<T U> ((int v1) (float32 v2)) cil)": 
        "abstract instance  default bool marshal (int32) SomeMethod<T, U>( int  v1,  float32  v2) cil",
        "(abstract bool (marshal int32) SomeMethod<T U> ((int v1) (float32 v2)) cil)": 
        "abstract  bool marshal (int32) SomeMethod<T, U>( int  v1,  float32  v2) cil",
        "(abstract bool SomeMethod<T U> ((int v1) (float32 v2)) cil)": 
        "abstract  bool  SomeMethod<T, U>( int  v1,  float32  v2) cil",
        "(abstract bool SomeMethod ((int v1) (float32 v2)) cil)": 
        "abstract  bool  SomeMethod( int  v1,  float32  v2) cil",
        "(abstract bool SomeMethod () cil)": 
        "abstract  bool  SomeMethod() cil"
    },
    "MethodName":{
        ".ctor": true,
        ".cctor": true,
        "Something": true,
        "Something.SomethingElse": true
    },
    "ImplAttr": {
        "cil": true,
        "forwardref": true,
        "internalcall": true,
        "managed": true,
        "native": true,
        "noinlining": true,
        "runtime": true,
        "synchronized": true,
        "unmanaged": true
    },
    "MethodAttr": {
        "abstract": true,
        "final": true,
        "(pinvokeimpl \"Something\" (as \"SomethingElse\") ansi autochar)": "pinvokeimpl (\"Something\" as \"SomethingElse\" ansi autochar)"
    },
    "PinvAttr": {
        "ansi": true,
        "autochar": true,
        "cdecl": true,
        "fastcall": true,
        "stdcall": true,
        "thiscall": true,
        "unicode": true,
        "platformapi": true
    },
    "DataDecl": {
        "(Something (int16 152))": "Something = int16 (152) "
    },
    "DataLabel": {
        "Something":  "Something"
    },
    "DdBody": {
        "((& Something) (bytearray (1 2 3 4)))": "{& (Something), bytearray (1 2 3 4)}",
        "(char * \"Some string\")": "char * (\"Some string\")",
        "((float32 1.5) (float64 10) (float32 1.5 10))": "{float32 (1.5) , float64 [10], float32 (1.5) [10]}",
        "(float64)": "float64 ",
        "(int32 1)": "int32 (1) ",
        "(int8 10 10)": "int8 (10) [10]",
        "(int16)": "int16 "

    },
    "DdItem": {
        "(& Something)": "& (Something)",
        "(bytearray (1 2 3 4))": "bytearray (1 2 3 4)",
        "(char * \"Some string\")": "char * (\"Some string\")",
        "(float32 1.3)": "float32 (1.3) ",
        "(float64 10)": "float64 [10]",
        "(float32 1.3 10)": "float32 (1.3) [10]",
        "(float64)": "float64 ",
        "(int32 1)": "int32 (1) ",
        "(int8 10 10)": "int8 (10) [10]",
        "(int16)": "int16 "
    }
}